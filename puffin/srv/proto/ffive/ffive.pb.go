// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ffive.proto

/*
Package go_micro_srv_ffive is a generated protocol buffer package.

It is generated from these files:
	ffive.proto

It has these top-level messages:
	Request
	Response
*/
package go_micro_srv_ffive

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "golang.org/x/net/context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Request struct {
	Ffiveurl string `protobuf:"bytes,1,opt,name=ffiveurl" json:"ffiveurl,omitempty"`
}

func (m *Request) Reset()                    { *m = Request{} }
func (m *Request) String() string            { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()               {}
func (*Request) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Request) GetFfiveurl() string {
	if m != nil {
		return m.Ffiveurl
	}
	return ""
}

type Response struct {
	Ffiversp string `protobuf:"bytes,1,opt,name=ffiversp" json:"ffiversp,omitempty"`
}

func (m *Response) Reset()                    { *m = Response{} }
func (m *Response) String() string            { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()               {}
func (*Response) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Response) GetFfiversp() string {
	if m != nil {
		return m.Ffiversp
	}
	return ""
}

func init() {
	proto.RegisterType((*Request)(nil), "go.micro.srv.ffive.Request")
	proto.RegisterType((*Response)(nil), "go.micro.srv.ffive.Response")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Getapi service

type GetapiClient interface {
	Apirps(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
}

type getapiClient struct {
	c           client.Client
	serviceName string
}

func NewGetapiClient(serviceName string, c client.Client) GetapiClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "go.micro.srv.ffive"
	}
	return &getapiClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *getapiClient) Apirps(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.serviceName, "Getapi.Apirps", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Getapi service

type GetapiHandler interface {
	Apirps(context.Context, *Request, *Response) error
}

func RegisterGetapiHandler(s server.Server, hdlr GetapiHandler, opts ...server.HandlerOption) {
	s.Handle(s.NewHandler(&Getapi{hdlr}, opts...))
}

type Getapi struct {
	GetapiHandler
}

func (h *Getapi) Apirps(ctx context.Context, in *Request, out *Response) error {
	return h.GetapiHandler.Apirps(ctx, in, out)
}

func init() { proto.RegisterFile("ffive.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 147 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4e, 0x4b, 0xcb, 0x2c,
	0x4b, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x12, 0x4a, 0xcf, 0xd7, 0xcb, 0xcd, 0x4c, 0x2e,
	0xca, 0xd7, 0x2b, 0x2e, 0x2a, 0xd3, 0x03, 0xcb, 0x28, 0xa9, 0x72, 0xb1, 0x07, 0xa5, 0x16, 0x96,
	0xa6, 0x16, 0x97, 0x08, 0x49, 0x71, 0x71, 0x80, 0xc5, 0x4a, 0x8b, 0x72, 0x24, 0x18, 0x15, 0x18,
	0x35, 0x38, 0x83, 0xe0, 0x7c, 0x25, 0x35, 0x2e, 0x8e, 0xa0, 0xd4, 0xe2, 0x82, 0xfc, 0xbc, 0xe2,
	0x54, 0xb8, 0xba, 0xa2, 0xe2, 0x02, 0x14, 0x75, 0x45, 0xc5, 0x05, 0x46, 0xfe, 0x5c, 0x6c, 0xee,
	0xa9, 0x25, 0x89, 0x05, 0x99, 0x42, 0xae, 0x5c, 0x6c, 0x8e, 0x05, 0x99, 0x45, 0x05, 0xc5, 0x42,
	0xd2, 0x7a, 0x98, 0xf6, 0xea, 0x41, 0x2d, 0x95, 0x92, 0xc1, 0x2e, 0x09, 0xb1, 0x4a, 0x89, 0x21,
	0x89, 0x0d, 0xec, 0x74, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0xb1, 0x0d, 0x3d, 0x59, 0xc9,
	0x00, 0x00, 0x00,
}
